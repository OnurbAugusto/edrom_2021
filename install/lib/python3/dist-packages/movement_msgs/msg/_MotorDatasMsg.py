# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from movement_msgs/MotorDatasMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MotorDatasMsg(genpy.Message):
  _md5sum = "a20165a6a0e94f4795ab484f0c0e748e"
  _type = "movement_msgs/MotorDatasMsg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 left_hip_yaw
float32 left_hip_pitch
float32 left_hip_roll
float32 left_knee
float32 left_ankle_pitch
float32 left_ankle_roll
float32 right_hip_yaw
float32 right_hip_pitch
float32 right_hip_roll
float32 right_knee
float32 right_ankle_pitch
float32 right_ankle_roll"""
  __slots__ = ['left_hip_yaw','left_hip_pitch','left_hip_roll','left_knee','left_ankle_pitch','left_ankle_roll','right_hip_yaw','right_hip_pitch','right_hip_roll','right_knee','right_ankle_pitch','right_ankle_roll']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       left_hip_yaw,left_hip_pitch,left_hip_roll,left_knee,left_ankle_pitch,left_ankle_roll,right_hip_yaw,right_hip_pitch,right_hip_roll,right_knee,right_ankle_pitch,right_ankle_roll

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotorDatasMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.left_hip_yaw is None:
        self.left_hip_yaw = 0.
      if self.left_hip_pitch is None:
        self.left_hip_pitch = 0.
      if self.left_hip_roll is None:
        self.left_hip_roll = 0.
      if self.left_knee is None:
        self.left_knee = 0.
      if self.left_ankle_pitch is None:
        self.left_ankle_pitch = 0.
      if self.left_ankle_roll is None:
        self.left_ankle_roll = 0.
      if self.right_hip_yaw is None:
        self.right_hip_yaw = 0.
      if self.right_hip_pitch is None:
        self.right_hip_pitch = 0.
      if self.right_hip_roll is None:
        self.right_hip_roll = 0.
      if self.right_knee is None:
        self.right_knee = 0.
      if self.right_ankle_pitch is None:
        self.right_ankle_pitch = 0.
      if self.right_ankle_roll is None:
        self.right_ankle_roll = 0.
    else:
      self.left_hip_yaw = 0.
      self.left_hip_pitch = 0.
      self.left_hip_roll = 0.
      self.left_knee = 0.
      self.left_ankle_pitch = 0.
      self.left_ankle_roll = 0.
      self.right_hip_yaw = 0.
      self.right_hip_pitch = 0.
      self.right_hip_roll = 0.
      self.right_knee = 0.
      self.right_ankle_pitch = 0.
      self.right_ankle_roll = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_12f().pack(_x.left_hip_yaw, _x.left_hip_pitch, _x.left_hip_roll, _x.left_knee, _x.left_ankle_pitch, _x.left_ankle_roll, _x.right_hip_yaw, _x.right_hip_pitch, _x.right_hip_roll, _x.right_knee, _x.right_ankle_pitch, _x.right_ankle_roll))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.left_hip_yaw, _x.left_hip_pitch, _x.left_hip_roll, _x.left_knee, _x.left_ankle_pitch, _x.left_ankle_roll, _x.right_hip_yaw, _x.right_hip_pitch, _x.right_hip_roll, _x.right_knee, _x.right_ankle_pitch, _x.right_ankle_roll,) = _get_struct_12f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_12f().pack(_x.left_hip_yaw, _x.left_hip_pitch, _x.left_hip_roll, _x.left_knee, _x.left_ankle_pitch, _x.left_ankle_roll, _x.right_hip_yaw, _x.right_hip_pitch, _x.right_hip_roll, _x.right_knee, _x.right_ankle_pitch, _x.right_ankle_roll))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.left_hip_yaw, _x.left_hip_pitch, _x.left_hip_roll, _x.left_knee, _x.left_ankle_pitch, _x.left_ankle_roll, _x.right_hip_yaw, _x.right_hip_pitch, _x.right_hip_roll, _x.right_knee, _x.right_ankle_pitch, _x.right_ankle_roll,) = _get_struct_12f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12f = None
def _get_struct_12f():
    global _struct_12f
    if _struct_12f is None:
        _struct_12f = struct.Struct("<12f")
    return _struct_12f
