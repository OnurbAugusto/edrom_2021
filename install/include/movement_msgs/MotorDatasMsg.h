// Generated by gencpp from file movement_msgs/MotorDatasMsg.msg
// DO NOT EDIT!


#ifndef MOVEMENT_MSGS_MESSAGE_MOTORDATASMSG_H
#define MOVEMENT_MSGS_MESSAGE_MOTORDATASMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace movement_msgs
{
template <class ContainerAllocator>
struct MotorDatasMsg_
{
  typedef MotorDatasMsg_<ContainerAllocator> Type;

  MotorDatasMsg_()
    : left_hip_yaw(0.0)
    , left_hip_pitch(0.0)
    , left_hip_roll(0.0)
    , left_knee(0.0)
    , left_ankle_pitch(0.0)
    , left_ankle_roll(0.0)
    , right_hip_yaw(0.0)
    , right_hip_pitch(0.0)
    , right_hip_roll(0.0)
    , right_knee(0.0)
    , right_ankle_pitch(0.0)
    , right_ankle_roll(0.0)  {
    }
  MotorDatasMsg_(const ContainerAllocator& _alloc)
    : left_hip_yaw(0.0)
    , left_hip_pitch(0.0)
    , left_hip_roll(0.0)
    , left_knee(0.0)
    , left_ankle_pitch(0.0)
    , left_ankle_roll(0.0)
    , right_hip_yaw(0.0)
    , right_hip_pitch(0.0)
    , right_hip_roll(0.0)
    , right_knee(0.0)
    , right_ankle_pitch(0.0)
    , right_ankle_roll(0.0)  {
  (void)_alloc;
    }



   typedef float _left_hip_yaw_type;
  _left_hip_yaw_type left_hip_yaw;

   typedef float _left_hip_pitch_type;
  _left_hip_pitch_type left_hip_pitch;

   typedef float _left_hip_roll_type;
  _left_hip_roll_type left_hip_roll;

   typedef float _left_knee_type;
  _left_knee_type left_knee;

   typedef float _left_ankle_pitch_type;
  _left_ankle_pitch_type left_ankle_pitch;

   typedef float _left_ankle_roll_type;
  _left_ankle_roll_type left_ankle_roll;

   typedef float _right_hip_yaw_type;
  _right_hip_yaw_type right_hip_yaw;

   typedef float _right_hip_pitch_type;
  _right_hip_pitch_type right_hip_pitch;

   typedef float _right_hip_roll_type;
  _right_hip_roll_type right_hip_roll;

   typedef float _right_knee_type;
  _right_knee_type right_knee;

   typedef float _right_ankle_pitch_type;
  _right_ankle_pitch_type right_ankle_pitch;

   typedef float _right_ankle_roll_type;
  _right_ankle_roll_type right_ankle_roll;





  typedef boost::shared_ptr< ::movement_msgs::MotorDatasMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::movement_msgs::MotorDatasMsg_<ContainerAllocator> const> ConstPtr;

}; // struct MotorDatasMsg_

typedef ::movement_msgs::MotorDatasMsg_<std::allocator<void> > MotorDatasMsg;

typedef boost::shared_ptr< ::movement_msgs::MotorDatasMsg > MotorDatasMsgPtr;
typedef boost::shared_ptr< ::movement_msgs::MotorDatasMsg const> MotorDatasMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::movement_msgs::MotorDatasMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::movement_msgs::MotorDatasMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::movement_msgs::MotorDatasMsg_<ContainerAllocator1> & lhs, const ::movement_msgs::MotorDatasMsg_<ContainerAllocator2> & rhs)
{
  return lhs.left_hip_yaw == rhs.left_hip_yaw &&
    lhs.left_hip_pitch == rhs.left_hip_pitch &&
    lhs.left_hip_roll == rhs.left_hip_roll &&
    lhs.left_knee == rhs.left_knee &&
    lhs.left_ankle_pitch == rhs.left_ankle_pitch &&
    lhs.left_ankle_roll == rhs.left_ankle_roll &&
    lhs.right_hip_yaw == rhs.right_hip_yaw &&
    lhs.right_hip_pitch == rhs.right_hip_pitch &&
    lhs.right_hip_roll == rhs.right_hip_roll &&
    lhs.right_knee == rhs.right_knee &&
    lhs.right_ankle_pitch == rhs.right_ankle_pitch &&
    lhs.right_ankle_roll == rhs.right_ankle_roll;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::movement_msgs::MotorDatasMsg_<ContainerAllocator1> & lhs, const ::movement_msgs::MotorDatasMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace movement_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::MotorDatasMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::MotorDatasMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::MotorDatasMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::MotorDatasMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::MotorDatasMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::MotorDatasMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::movement_msgs::MotorDatasMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a20165a6a0e94f4795ab484f0c0e748e";
  }

  static const char* value(const ::movement_msgs::MotorDatasMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa20165a6a0e94f47ULL;
  static const uint64_t static_value2 = 0x95ab484f0c0e748eULL;
};

template<class ContainerAllocator>
struct DataType< ::movement_msgs::MotorDatasMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "movement_msgs/MotorDatasMsg";
  }

  static const char* value(const ::movement_msgs::MotorDatasMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::movement_msgs::MotorDatasMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 left_hip_yaw\n"
"float32 left_hip_pitch\n"
"float32 left_hip_roll\n"
"float32 left_knee\n"
"float32 left_ankle_pitch\n"
"float32 left_ankle_roll\n"
"float32 right_hip_yaw\n"
"float32 right_hip_pitch\n"
"float32 right_hip_roll\n"
"float32 right_knee\n"
"float32 right_ankle_pitch\n"
"float32 right_ankle_roll\n"
;
  }

  static const char* value(const ::movement_msgs::MotorDatasMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::movement_msgs::MotorDatasMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left_hip_yaw);
      stream.next(m.left_hip_pitch);
      stream.next(m.left_hip_roll);
      stream.next(m.left_knee);
      stream.next(m.left_ankle_pitch);
      stream.next(m.left_ankle_roll);
      stream.next(m.right_hip_yaw);
      stream.next(m.right_hip_pitch);
      stream.next(m.right_hip_roll);
      stream.next(m.right_knee);
      stream.next(m.right_ankle_pitch);
      stream.next(m.right_ankle_roll);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorDatasMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::movement_msgs::MotorDatasMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::movement_msgs::MotorDatasMsg_<ContainerAllocator>& v)
  {
    s << indent << "left_hip_yaw: ";
    Printer<float>::stream(s, indent + "  ", v.left_hip_yaw);
    s << indent << "left_hip_pitch: ";
    Printer<float>::stream(s, indent + "  ", v.left_hip_pitch);
    s << indent << "left_hip_roll: ";
    Printer<float>::stream(s, indent + "  ", v.left_hip_roll);
    s << indent << "left_knee: ";
    Printer<float>::stream(s, indent + "  ", v.left_knee);
    s << indent << "left_ankle_pitch: ";
    Printer<float>::stream(s, indent + "  ", v.left_ankle_pitch);
    s << indent << "left_ankle_roll: ";
    Printer<float>::stream(s, indent + "  ", v.left_ankle_roll);
    s << indent << "right_hip_yaw: ";
    Printer<float>::stream(s, indent + "  ", v.right_hip_yaw);
    s << indent << "right_hip_pitch: ";
    Printer<float>::stream(s, indent + "  ", v.right_hip_pitch);
    s << indent << "right_hip_roll: ";
    Printer<float>::stream(s, indent + "  ", v.right_hip_roll);
    s << indent << "right_knee: ";
    Printer<float>::stream(s, indent + "  ", v.right_knee);
    s << indent << "right_ankle_pitch: ";
    Printer<float>::stream(s, indent + "  ", v.right_ankle_pitch);
    s << indent << "right_ankle_roll: ";
    Printer<float>::stream(s, indent + "  ", v.right_ankle_roll);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEMENT_MSGS_MESSAGE_MOTORDATASMSG_H
